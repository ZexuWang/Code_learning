/*
请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但与"aa.a"和"ab*a"均不匹配。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。

*/

class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length();
        int n = p.length();
        bool f[m+1][n+1];//定义转移方程
        memset(f,0,sizeof(f));//初始化f并将所有的值都赋为0（false）
        for(int i = 0; i <= m; ++i) {
            for (int j = 0; j <= n; ++j) {
                //先判断是否为空的正则表达式
                if (j == 0) {
                    f[i][j] = i == 0;
                } else {
                    if (p[j - 1] != '*') {
                        if (i > 0 && (s[i - 1] == p[j - 1] || p[j - 1] == '.'))
                        // 在i非空的情况下，判断s与p相同或者p中存在‘.’
                        {
                            f[i][j] = f[i - 1][j - 1];
                            //此时，i和j满足条件，下标前移进行判断
                        }
                    } else {//此时考虑p[j - 1] == '*'的情况
                        if (j >= 2) {
                            f[i][j] = f[i][j] || f[i][j - 2];
                            //若j>=2，我们先假设*前面对应的两位重复了0次，
                            //因此需要判断f[i][j - 2]是否为1，即除去最后
                            //两位外的其他位是否匹配，匹配则返回true
                        }
                        if (i >= 1 && j >= 2 && (s[i - 1] == p[j - 2] || p[j - 2] == '.')) {
                            //有*的情况下，先判断s[i - 1]和p[j - 2]是否匹配
                            //若匹配则往前移动s，继续判断（因为*可能表示重复多次）
                            f[i][j] = f[i][j] || f[i - 1][j];

                        }
                    }
                }
            }
        }
    return f[m][n];
    }
};