/*1557. 可以到达所有点的最少点数目
给你一个 有向无环图 ， n 个节点编号为 0 到 n-1 ，以及一个边数组 edges ，其中 edges[i] = [fromi, toi] 表示一条从点  fromi 到点 toi 的有向边。

找到最小的点集使得从这些点出发能到达图中所有点。题目保证解存在且唯一。

你可以以任意顺序返回这些节点编号。

 

示例 1：



输入：n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
输出：[0,3]
解释：从单个节点出发无法到达所有节点。从 0 出发我们可以到达 [0,1,2,5] 。从 3 出发我们可以到达 [3,4,2,5] 。所以我们输出 [0,3] 。
示例 2：



输入：n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
输出：[0,2,3]
解释：注意到节点 0，3 和 2 无法从其他节点到达，所以我们必须将它们包含在结果点集中，这些点都能到达节点 1 和 4 。
 

提示：

2 <= n <= 10^5
1 <= edges.length <= min(10^5, n * (n - 1) / 2)
edges[i].length == 2
0 <= fromi, toi < n
所有点对 (fromi, toi) 互不相同。
*/

/*
 解题思路：
 对于任意节点 x，如果其入度不为零，则一定存在节点 y 指向节点 x，从节点 y 出发即可到达节点 y 和节点 x，因此如果从节点 y 出发，节点 x 和节点 y 都可以到达，且从节点 y 出发可以到达的节点比从节点 x 出发可以到达的节点更多。

由于给定的图是有向无环图，基于上述分析可知，对于任意入度不为零的节点 x，一定存在另一个节点 z，使得从节点 z 出发可以到达节点 x。为了获得最小的点集，只有入度为零的节点才应该加入最小的点集。

由于入度为零的节点必须从其自身出发才能到达该节点，从别的节点出发都无法到达该节点，因此最小的点集必须包含所有入度为零的节点。
因为入度不为零的点总可以由某个入度为零的点到达，所以这些点不包括在最小的合法点集当中。
因此，我们得到「最小的点集使得从这些点出发能到达图中所有点」就是入度为零的所有点的集合。
如何判断一个节点的入度是否为零呢？在有向图中，一个节点的入度等于以该节点为终点的有向边的数量，因此一个节点的入度为零，当且仅当对于任何有向边，该节点都不是有向边的终点。

因此，可以遍历所有的边，使用集合存储所有有向边的终点，集合中的所有节点即为入度不为零的节点，剩下的所有节点即为入度为零的节点。

*/

class Solution {
public:
    vector<int> findSmallestSetOfVertices(int n, vector<vector<int>>& edges) {
        vector<int> res;
        unordered_set<int> set;

        for (auto& edge : edges) {
            set.insert(edge[1]);
        }
        for (int i = 0; i < n; ++i) {
            if (set.find(i) == set.end()) {
                res.push_back(i);
            }
        }
        return res;
    }
};
